import asyncio
from aiogram import Router, F, types
from aiogram.enums.dice_emoji import DiceEmoji
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from functools import lru_cache
from typing import List

from bot.handlers.select_game import create_slots_menu
from bot.keyboards.play_menu import create_play_menu
from bot.services.bet_manager import bet_manager  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º bet_manager

router = Router()

SYMBOLS = ["BAR", "üçá", "üçã", "7Ô∏è‚É£"]

@lru_cache(maxsize=64)
def get_combo_parts(dice_value: int) -> List[str]:
    dice_value -= 1
    result = []
    for _ in range(3):
        result.append(SYMBOLS[dice_value % 4])
        dice_value //= 4
    return result

@lru_cache(maxsize=64)
def get_combo_text(dice_value: int, l10n=None) -> str:
    parts = get_combo_parts(dice_value)
    if l10n:
        parts = [l10n.format_value(p) for p in parts]
    return " | ".join(parts)

@lru_cache(maxsize=64)
def get_score_change(dice_value: int) -> int:
    dice_value -= 1
    first = dice_value % 4
    second = (dice_value // 4) % 4
    third = (dice_value // 16) % 4

    if first == second == third == 3:
        return 10
    elif (first == second == 3) or (second == third == 3) or (first == third == 3):
        return 5
    elif first == second == third:
        return 7
    else:
        return 0

@router.message(F.text == "üé∞ –ö—Ä—É—Ç–∏—Ç—å —Å–ª–æ—Ç—ã")
async def show_slot_interface(message: types.Message):
    user_id = message.from_user.id
    # –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ –ø—Ä–æ—Å—Ç–æ –Ω–µ –Ω–∞–¥–æ –Ω–∏—á–µ–≥–æ –¥–µ–ª–∞—Ç—å ‚Äî —Å—Ç–∞–≤–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —É–∂–µ –µ—Å—Ç—å –≤ bet_manager
    await message.answer(
        "üé∞ –í—ã –≤–æ—à–ª–∏ –≤ —Ä–µ–∂–∏–º —Å–ª–æ—Ç–æ–≤.\n–ù–∞–∂–º–∏—Ç–µ üïπÔ∏è –ò–≥—Ä–∞—Ç—å, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!",
        reply_markup=create_play_menu(user_id)
    )

@router.message(F.text == "üïπÔ∏è –ò–≥—Ä–∞—Ç—å")
async def slot_spin(message: types.Message):
    user_id = message.from_user.id
    bet = bet_manager.get_bet(user_id)  # –°—Ç–∞–≤–∫–∞ –±—É–¥–µ—Ç —Ç–µ–ø–µ—Ä—å –∏–∑ bet_manager

    dice_msg = await message.answer_dice(emoji=DiceEmoji.SLOT_MACHINE)
    await asyncio.sleep(2.5)

    value = dice_msg.dice.value
    combo = get_combo_text(value)
    multiplier = get_score_change(value)
    win = bet * multiplier

    await message.answer(
        f"üé∞ –í–∞—à–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è: {combo}\n"
        f"–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: {bet}$\n"
        f"–í—ã–∏–≥—Ä—ã—à: {win}$"
    )

@router.message(F.text == "üìï –ü—Ä–∞–≤–∏–ª–∞")
async def show_rules(message: types.Message):
    await message.answer(
        "üìú *–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –≤ —Å–ª–æ—Ç—ã:*\n\n"
        "üé∞ –í –∫–∞–∑–∏–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ 4 —ç–ª–µ–º–µ–Ω—Ç–∞:\n"
        "‚Ä¢ BAR\n"
        "‚Ä¢ üçá –í–∏–Ω–æ–≥—Ä–∞–¥\n"
        "‚Ä¢ üçã –õ–∏–º–æ–Ω\n"
        "‚Ä¢ 7Ô∏è‚É£ –°–µ–º—å\n\n"
        "üî¢ –í—Å–µ–≥–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π: 64\n\n"
        "üí• *–í—ã–∏–≥—Ä—ã—à–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏:*\n"
        "‚Ä¢ 7Ô∏è‚É£7Ô∏è‚É£7Ô∏è‚É£ ‚Äî —Å—Ç–∞–≤–∫–∞ √ó10\n"
        "‚Ä¢ 7Ô∏è‚É£7Ô∏è‚É£ + –ª—é–±–æ–π —Å–∏–º–≤–æ–ª ‚Äî —Å—Ç–∞–≤–∫–∞ √ó5\n"
        "‚Ä¢ 3 –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–∞ ‚Äî —Å—Ç–∞–≤–∫–∞ √ó7\n\n"
        "üí∏ –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π ‚Äî –≤—ã–∏–≥—Ä—ã—à 0",
        parse_mode="Markdown"
    )

@router.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ —Ä–µ–∂–∏–º—ã")
async def back_to_modes(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "üîô –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞.",
        reply_markup=create_slots_menu()
    )
